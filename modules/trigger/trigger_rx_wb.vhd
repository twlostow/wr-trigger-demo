---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for Trigger RX module
---------------------------------------------------------------------------------------
-- File           : trigger_rx_wb.vhd
-- Author         : auto-generated by wbgen2 from trigger_rx_wb.wb
-- Created        : Mon Nov 19 17:43:10 2012
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE trigger_rx_wb.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.wbgen2_pkg.all;

use work.trx_wbgen2_pkg.all;


entity trigger_rx_wb is
  port (
    rst_n_i                                  : in     std_logic;
    clk_sys_i                                : in     std_logic;
    wb_adr_i                                 : in     std_logic_vector(9 downto 0);
    wb_dat_i                                 : in     std_logic_vector(31 downto 0);
    wb_dat_o                                 : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
    wb_stall_o                               : out    std_logic;
-- Ports for RAM: Delay Histogram Buffer
    trx_dhb_ram_addr_i                       : in     std_logic_vector(8 downto 0);
-- Read data output
    trx_dhb_ram_data_o                       : out    std_logic_vector(31 downto 0);
-- Read strobe input (active high)
    trx_dhb_ram_rd_i                         : in     std_logic;
-- Write data input
    trx_dhb_ram_data_i                       : in     std_logic_vector(31 downto 0);
-- Write strobe (active high)
    trx_dhb_ram_wr_i                         : in     std_logic;
    regs_i                                   : in     t_trx_in_registers;
    regs_o                                   : out    t_trx_out_registers
  );
end trigger_rx_wb;

architecture syn of trigger_rx_wb is

signal trx_cr_enable_int                        : std_logic      ;
signal trx_cr_rst_cnt_dly0                      : std_logic      ;
signal trx_cr_rst_cnt_int                       : std_logic      ;
signal trx_cr_rst_hist_dly0                     : std_logic      ;
signal trx_cr_rst_hist_int                      : std_logic      ;
signal trx_cr_id_int                            : std_logic_vector(15 downto 0);
signal trx_rx_hist_bias_int                     : std_logic_vector(27 downto 0);
signal trx_rx_hist_scale_int                    : std_logic_vector(17 downto 0);
signal trx_delay_c_int                          : std_logic_vector(27 downto 0);
signal trx_delay_f_int                          : std_logic_vector(11 downto 0);
signal trx_dhb_ram_rddata_int                   : std_logic_vector(31 downto 0);
signal trx_dhb_ram_rd_int                       : std_logic      ;
signal trx_dhb_ram_wr_int                       : std_logic      ;
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(9 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_dat_i;
  bwsel_reg <= wb_sel_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      trx_cr_enable_int <= '0';
      trx_cr_rst_cnt_int <= '0';
      trx_cr_rst_hist_int <= '0';
      trx_cr_id_int <= "0000000000000000";
      trx_rx_hist_bias_int <= "0000000000000000000000000000";
      trx_rx_hist_scale_int <= "000000000000000000";
      trx_delay_c_int <= "0000000000000000000000000000";
      trx_delay_f_int <= "000000000000";
    elsif rising_edge(clk_sys_i) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          trx_cr_rst_cnt_int <= '0';
          trx_cr_rst_hist_int <= '0';
          ack_in_progress <= '0';
        else
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(9) is
          when '0' => 
            case rwaddr_reg(2 downto 0) is
            when "000" => 
              if (wb_we_i = '1') then
                trx_cr_enable_int <= wrdata_reg(0);
                trx_cr_rst_cnt_int <= wrdata_reg(1);
                trx_cr_rst_hist_int <= wrdata_reg(2);
                trx_cr_id_int <= wrdata_reg(18 downto 3);
              end if;
              rddata_reg(0) <= trx_cr_enable_int;
              rddata_reg(1) <= 'X';
              rddata_reg(2) <= 'X';
              rddata_reg(18 downto 3) <= trx_cr_id_int;
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
              ack_sreg(2) <= '1';
              ack_in_progress <= '1';
            when "001" => 
              if (wb_we_i = '1') then
              end if;
              rddata_reg(31 downto 0) <= regs_i.cntr_rx_i;
              ack_sreg(0) <= '1';
              ack_in_progress <= '1';
            when "010" => 
              if (wb_we_i = '1') then
              end if;
              rddata_reg(31 downto 0) <= regs_i.cntr_exec_i;
              ack_sreg(0) <= '1';
              ack_in_progress <= '1';
            when "011" => 
              if (wb_we_i = '1') then
                trx_rx_hist_bias_int <= wrdata_reg(27 downto 0);
              end if;
              rddata_reg(27 downto 0) <= trx_rx_hist_bias_int;
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
              ack_sreg(0) <= '1';
              ack_in_progress <= '1';
            when "100" => 
              if (wb_we_i = '1') then
                trx_rx_hist_scale_int <= wrdata_reg(17 downto 0);
              end if;
              rddata_reg(17 downto 0) <= trx_rx_hist_scale_int;
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
              ack_sreg(0) <= '1';
              ack_in_progress <= '1';
            when "101" => 
              if (wb_we_i = '1') then
                trx_delay_c_int <= wrdata_reg(27 downto 0);
              end if;
              rddata_reg(27 downto 0) <= trx_delay_c_int;
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
              ack_sreg(0) <= '1';
              ack_in_progress <= '1';
            when "110" => 
              if (wb_we_i = '1') then
                trx_delay_f_int <= wrdata_reg(11 downto 0);
              end if;
              rddata_reg(11 downto 0) <= trx_delay_f_int;
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
              ack_sreg(0) <= '1';
              ack_in_progress <= '1';
            when others =>
-- prevent the slave from hanging the bus on invalid address
              ack_in_progress <= '1';
              ack_sreg(0) <= '1';
            end case;
          when '1' => 
            if (rd_int = '1') then
              ack_sreg(0) <= '1';
            else
              ack_sreg(0) <= '1';
            end if;
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Data output multiplexer process
  process (rddata_reg, rwaddr_reg, trx_dhb_ram_rddata_int, wb_adr_i  )
  begin
    case rwaddr_reg(9) is
    when '1' => 
      wb_dat_o(31 downto 0) <= trx_dhb_ram_rddata_int;
    when others =>
      wb_dat_o <= rddata_reg;
    end case;
  end process;
  
  
-- Read & write lines decoder for RAMs
  process (wb_adr_i, rd_int, wr_int  )
  begin
    if (wb_adr_i(9) = '1') then
      trx_dhb_ram_rd_int <= rd_int;
      trx_dhb_ram_wr_int <= wr_int;
    else
      trx_dhb_ram_wr_int <= '0';
      trx_dhb_ram_rd_int <= '0';
    end if;
  end process;
  
  
-- Enable
  regs_o.cr_enable_o <= trx_cr_enable_int;
-- Reset counters
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      trx_cr_rst_cnt_dly0 <= '0';
      regs_o.cr_rst_cnt_o <= '0';
    elsif rising_edge(clk_sys_i) then
      trx_cr_rst_cnt_dly0 <= trx_cr_rst_cnt_int;
      regs_o.cr_rst_cnt_o <= trx_cr_rst_cnt_int and (not trx_cr_rst_cnt_dly0);
    end if;
  end process;
  
  
-- Reset histogram
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      trx_cr_rst_hist_dly0 <= '0';
      regs_o.cr_rst_hist_o <= '0';
    elsif rising_edge(clk_sys_i) then
      trx_cr_rst_hist_dly0 <= trx_cr_rst_hist_int;
      regs_o.cr_rst_hist_o <= trx_cr_rst_hist_int and (not trx_cr_rst_hist_dly0);
    end if;
  end process;
  
  
-- Broadcast Trigger ID
  regs_o.cr_id_o <= trx_cr_id_int;
-- Trigger count
-- Trigger count
-- H Bias
  regs_o.rx_hist_bias_o <= trx_rx_hist_bias_int;
-- H Scale
  regs_o.rx_hist_scale_o <= trx_rx_hist_scale_int;
-- Reference clock cycles
  regs_o.delay_c_o <= trx_delay_c_int;
-- Fractional part
  regs_o.delay_f_o <= trx_delay_f_int;
-- extra code for reg/fifo/mem: Delay Histogram Buffer
-- RAM block instantiation for memory: Delay Histogram Buffer
  trx_dhb_ram_raminst : wbgen2_dpssram
    generic map (
      g_data_width         => 32,
      g_size               => 512,
      g_addr_width         => 9,
      g_dual_clock         => false,
      g_use_bwsel          => false
    )
    port map (
      clk_a_i              => clk_sys_i,
      clk_b_i              => clk_sys_i,
      addr_b_i             => trx_dhb_ram_addr_i,
      addr_a_i             => rwaddr_reg(8 downto 0),
      data_b_o             => trx_dhb_ram_data_o,
      rd_b_i               => trx_dhb_ram_rd_i,
      data_b_i             => trx_dhb_ram_data_i,
      wr_b_i               => trx_dhb_ram_wr_i,
      bwsel_b_i            => allones(3 downto 0),
      data_a_o             => trx_dhb_ram_rddata_int(31 downto 0),
      rd_a_i               => trx_dhb_ram_rd_int,
      data_a_i             => wrdata_reg(31 downto 0),
      wr_a_i               => trx_dhb_ram_wr_int,
      bwsel_a_i            => allones(3 downto 0)
    );
  
  rwaddr_reg <= wb_adr_i;
  wb_stall_o <= (not ack_sreg(0)) and (wb_stb_i and wb_cyc_i);
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
