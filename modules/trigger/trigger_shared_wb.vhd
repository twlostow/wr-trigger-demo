---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for Trigger shared module
---------------------------------------------------------------------------------------
-- File           : trigger_shared_wb.vhd
-- Author         : auto-generated by wbgen2 from trigger_shared_wb.wb
-- Created        : Thu Mar 14 23:42:50 2013
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE trigger_shared_wb.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.wbgen2_pkg.all;

use work.tts_wbgen2_pkg.all;


entity trigger_shared_wb is
  port (
    rst_n_i                                  : in     std_logic;
    clk_sys_i                                : in     std_logic;
    wb_adr_i                                 : in     std_logic_vector(7 downto 0);
    wb_dat_i                                 : in     std_logic_vector(31 downto 0);
    wb_dat_o                                 : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
    wb_stall_o                               : out    std_logic;
-- Ports for RAM: Trigger Detection Buffer
    tts_tdb_ram_addr_i                       : in     std_logic_vector(6 downto 0);
-- Read data output
    tts_tdb_ram_data_o                       : out    std_logic_vector(31 downto 0);
-- Read strobe input (active high)
    tts_tdb_ram_rd_i                         : in     std_logic;
-- Write data input
    tts_tdb_ram_data_i                       : in     std_logic_vector(31 downto 0);
-- Write strobe (active high)
    tts_tdb_ram_wr_i                         : in     std_logic;
    regs_i                                   : in     t_tts_in_registers;
    regs_o                                   : out    t_tts_out_registers
  );
end trigger_shared_wb;

architecture syn of trigger_shared_wb is

signal tts_cr_configured_int                    : std_logic      ;
signal tts_cr_clear_tdb_dly0                    : std_logic      ;
signal tts_cr_clear_tdb_int                     : std_logic      ;
signal tts_tdb_ram_rddata_int                   : std_logic_vector(31 downto 0);
signal tts_tdb_ram_rd_int                       : std_logic      ;
signal tts_tdb_ram_wr_int                       : std_logic      ;
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(7 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_dat_i;
  bwsel_reg <= wb_sel_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      tts_cr_configured_int <= '0';
      tts_cr_clear_tdb_int <= '0';
    elsif rising_edge(clk_sys_i) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          tts_cr_clear_tdb_int <= '0';
          ack_in_progress <= '0';
        else
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(7) is
          when '0' => 
            case rwaddr_reg(0) is
            when '0' => 
              if (wb_we_i = '1') then
                tts_cr_configured_int <= wrdata_reg(0);
                tts_cr_clear_tdb_int <= wrdata_reg(1);
              end if;
              rddata_reg(0) <= tts_cr_configured_int;
              rddata_reg(1) <= '0';
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
              ack_sreg(2) <= '1';
              ack_in_progress <= '1';
            when '1' => 
              if (wb_we_i = '1') then
              end if;
              rddata_reg(7 downto 0) <= regs_i.idr_fw_id_i;
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
              ack_sreg(0) <= '1';
              ack_in_progress <= '1';
            when others =>
-- prevent the slave from hanging the bus on invalid address
              ack_in_progress <= '1';
              ack_sreg(0) <= '1';
            end case;
          when '1' => 
            if (rd_int = '1') then
              ack_sreg(0) <= '1';
            else
              ack_sreg(0) <= '1';
            end if;
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Data output multiplexer process
  process (rddata_reg, rwaddr_reg, tts_tdb_ram_rddata_int, wb_adr_i  )
  begin
    case rwaddr_reg(7) is
    when '1' => 
      wb_dat_o(31 downto 0) <= tts_tdb_ram_rddata_int;
    when others =>
      wb_dat_o <= rddata_reg;
    end case;
  end process;
  
  
-- Read & write lines decoder for RAMs
  process (wb_adr_i, rd_int, wr_int  )
  begin
    if (wb_adr_i(7) = '1') then
      tts_tdb_ram_rd_int <= rd_int;
      tts_tdb_ram_wr_int <= wr_int;
    else
      tts_tdb_ram_wr_int <= '0';
      tts_tdb_ram_rd_int <= '0';
    end if;
  end process;
  
  
-- Configured
  regs_o.cr_configured_o <= tts_cr_configured_int;
-- Clear Trigger Detection Buffer
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      tts_cr_clear_tdb_dly0 <= '0';
      regs_o.cr_clear_tdb_o <= '0';
    elsif rising_edge(clk_sys_i) then
      tts_cr_clear_tdb_dly0 <= tts_cr_clear_tdb_int;
      regs_o.cr_clear_tdb_o <= tts_cr_clear_tdb_int and (not tts_cr_clear_tdb_dly0);
    end if;
  end process;
  
  
-- FW Type
-- extra code for reg/fifo/mem: Trigger Detection Buffer
-- RAM block instantiation for memory: Trigger Detection Buffer
  tts_tdb_ram_raminst : wbgen2_dpssram
    generic map (
      g_data_width         => 32,
      g_size               => 128,
      g_addr_width         => 7,
      g_dual_clock         => false,
      g_use_bwsel          => false
    )
    port map (
      clk_a_i              => clk_sys_i,
      clk_b_i              => clk_sys_i,
      addr_b_i             => tts_tdb_ram_addr_i,
      addr_a_i             => rwaddr_reg(6 downto 0),
      data_b_o             => tts_tdb_ram_data_o,
      rd_b_i               => tts_tdb_ram_rd_i,
      data_b_i             => tts_tdb_ram_data_i,
      wr_b_i               => tts_tdb_ram_wr_i,
      bwsel_b_i            => allones(3 downto 0),
      data_a_o             => tts_tdb_ram_rddata_int(31 downto 0),
      rd_a_i               => tts_tdb_ram_rd_int,
      data_a_i             => wrdata_reg(31 downto 0),
      wr_a_i               => tts_tdb_ram_wr_int,
      bwsel_a_i            => allones(3 downto 0)
    );
  
  rwaddr_reg <= wb_adr_i;
  wb_stall_o <= (not ack_sreg(0)) and (wb_stb_i and wb_cyc_i);
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
